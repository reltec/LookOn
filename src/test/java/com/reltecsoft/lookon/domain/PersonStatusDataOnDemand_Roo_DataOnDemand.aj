// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.PersonStatus;
import com.reltecsoft.lookon.domain.PersonStatusDataOnDemand;
import com.reltecsoft.lookon.repository.PersonStatusRepository;
import com.reltecsoft.lookon.service.PersonStatusService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersonStatusDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonStatusDataOnDemand: @Component;
    
    private Random PersonStatusDataOnDemand.rnd = new SecureRandom();
    
    private List<PersonStatus> PersonStatusDataOnDemand.data;
    
    @Autowired
    PersonStatusService PersonStatusDataOnDemand.personStatusService;
    
    @Autowired
    PersonStatusRepository PersonStatusDataOnDemand.personStatusRepository;
    
    public PersonStatus PersonStatusDataOnDemand.getNewTransientPersonStatus(int index) {
        PersonStatus obj = new PersonStatus();
        setName(obj, index);
        return obj;
    }
    
    public void PersonStatusDataOnDemand.setName(PersonStatus obj, int index) {
        String name = "name_" + index;
        if (name.length() > 20) {
            name = new Random().nextInt(10) + name.substring(1, 20);
        }
        obj.setName(name);
    }
    
    public PersonStatus PersonStatusDataOnDemand.getSpecificPersonStatus(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PersonStatus obj = data.get(index);
        Long id = obj.getId();
        return personStatusService.findPersonStatus(id);
    }
    
    public PersonStatus PersonStatusDataOnDemand.getRandomPersonStatus() {
        init();
        PersonStatus obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return personStatusService.findPersonStatus(id);
    }
    
    public boolean PersonStatusDataOnDemand.modifyPersonStatus(PersonStatus obj) {
        return false;
    }
    
    public void PersonStatusDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = personStatusService.findPersonStatusEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PersonStatus' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PersonStatus>();
        for (int i = 0; i < 10; i++) {
            PersonStatus obj = getNewTransientPersonStatus(i);
            try {
                personStatusService.savePersonStatus(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            personStatusRepository.flush();
            data.add(obj);
        }
    }
    
}
