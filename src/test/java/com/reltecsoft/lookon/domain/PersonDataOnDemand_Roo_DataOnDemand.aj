// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.DtPersonActivityStatus;
import com.reltecsoft.lookon.domain.DtPersonActivityStatusDataOnDemand;
import com.reltecsoft.lookon.domain.DtPersonNetworkStatus;
import com.reltecsoft.lookon.domain.DtPersonNetworkStatusDataOnDemand;
import com.reltecsoft.lookon.domain.MediaDataOnDemand;
import com.reltecsoft.lookon.domain.Person;
import com.reltecsoft.lookon.domain.PersonDataOnDemand;
import com.reltecsoft.lookon.domain.WorkspaceDataOnDemand;
import com.reltecsoft.lookon.repository.PersonRepository;
import com.reltecsoft.lookon.service.PersonService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonDataOnDemand: @Component;
    
    private Random PersonDataOnDemand.rnd = new SecureRandom();
    
    private List<Person> PersonDataOnDemand.data;
    
    @Autowired
    DtPersonActivityStatusDataOnDemand PersonDataOnDemand.dtPersonActivityStatusDataOnDemand;
    
    @Autowired
    DtPersonNetworkStatusDataOnDemand PersonDataOnDemand.dtPersonNetworkStatusDataOnDemand;
    
    @Autowired
    MediaDataOnDemand PersonDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    WorkspaceDataOnDemand PersonDataOnDemand.workspaceDataOnDemand;
    
    @Autowired
    PersonService PersonDataOnDemand.personService;
    
    @Autowired
    PersonRepository PersonDataOnDemand.personRepository;
    
    public Person PersonDataOnDemand.getNewTransientPerson(int index) {
        Person obj = new Person();
        setActivityStatusId(obj, index);
        setAdress(obj, index);
        setBirthDate(obj, index);
        setCity(obj, index);
        setCountry(obj, index);
        setEmail(obj, index);
        setLogin(obj, index);
        setMaleFemale(obj, index);
        setMiddleName(obj, index);
        setName(obj, index);
        setNetworkStatusId(obj, index);
        setPhone(obj, index);
        setRegdate(obj, index);
        setSurname(obj, index);
        return obj;
    }
    
    public void PersonDataOnDemand.setActivityStatusId(Person obj, int index) {
        DtPersonActivityStatus activityStatusId = dtPersonActivityStatusDataOnDemand.getRandomDtPersonActivityStatus();
        obj.setActivityStatusId(activityStatusId);
    }
    
    public void PersonDataOnDemand.setAdress(Person obj, int index) {
        String adress = "adress_" + index;
        if (adress.length() > 255) {
            adress = adress.substring(0, 255);
        }
        obj.setAdress(adress);
    }
    
    public void PersonDataOnDemand.setBirthDate(Person obj, int index) {
        Calendar birthDate = Calendar.getInstance();
        obj.setBirthDate(birthDate);
    }
    
    public void PersonDataOnDemand.setCity(Person obj, int index) {
        String city = "city_" + index;
        if (city.length() > 255) {
            city = city.substring(0, 255);
        }
        obj.setCity(city);
    }
    
    public void PersonDataOnDemand.setCountry(Person obj, int index) {
        String country = "country_" + index;
        if (country.length() > 50) {
            country = country.substring(0, 50);
        }
        obj.setCountry(country);
    }
    
    public void PersonDataOnDemand.setEmail(Person obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 50) {
            email = email.substring(0, 50);
        }
        obj.setEmail(email);
    }
    
    public void PersonDataOnDemand.setLogin(Person obj, int index) {
        String login = "login_" + index;
        if (login.length() > 50) {
            login = login.substring(0, 50);
        }
        obj.setLogin(login);
    }
    
    public void PersonDataOnDemand.setMaleFemale(Person obj, int index) {
        Boolean maleFemale = true;
        obj.setMaleFemale(maleFemale);
    }
    
    public void PersonDataOnDemand.setMiddleName(Person obj, int index) {
        String middleName = "middleName_" + index;
        if (middleName.length() > 50) {
            middleName = middleName.substring(0, 50);
        }
        obj.setMiddleName(middleName);
    }
    
    public void PersonDataOnDemand.setName(Person obj, int index) {
        String name = "name_" + index;
        if (name.length() > 50) {
            name = name.substring(0, 50);
        }
        obj.setName(name);
    }
    
    public void PersonDataOnDemand.setNetworkStatusId(Person obj, int index) {
        DtPersonNetworkStatus networkStatusId = dtPersonNetworkStatusDataOnDemand.getRandomDtPersonNetworkStatus();
        obj.setNetworkStatusId(networkStatusId);
    }
    
    public void PersonDataOnDemand.setPhone(Person obj, int index) {
        String phone = "phone_" + index;
        if (phone.length() > 20) {
            phone = phone.substring(0, 20);
        }
        obj.setPhone(phone);
    }
    
    public void PersonDataOnDemand.setRegdate(Person obj, int index) {
        Calendar regdate = Calendar.getInstance();
        obj.setRegdate(regdate);
    }
    
    public void PersonDataOnDemand.setSurname(Person obj, int index) {
        String surname = "surname_" + index;
        if (surname.length() > 50) {
            surname = surname.substring(0, 50);
        }
        obj.setSurname(surname);
    }
    
    public Person PersonDataOnDemand.getSpecificPerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Person obj = data.get(index);
        Long id = obj.getId();
        return personService.findPerson(id);
    }
    
    public Person PersonDataOnDemand.getRandomPerson() {
        init();
        Person obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return personService.findPerson(id);
    }
    
    public boolean PersonDataOnDemand.modifyPerson(Person obj) {
        return false;
    }
    
    public void PersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = personService.findPersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Person' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Person>();
        for (int i = 0; i < 10; i++) {
            Person obj = getNewTransientPerson(i);
            try {
                personService.savePerson(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            personRepository.flush();
            data.add(obj);
        }
    }
    
}
