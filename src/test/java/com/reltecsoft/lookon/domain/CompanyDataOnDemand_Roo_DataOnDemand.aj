// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.Company;
import com.reltecsoft.lookon.domain.CompanyDataOnDemand;
import com.reltecsoft.lookon.domain.CompanyStatusDataOnDemand;
import com.reltecsoft.lookon.domain.Email;
import com.reltecsoft.lookon.domain.MediaDataOnDemand;
import com.reltecsoft.lookon.domain.Phone;
import com.reltecsoft.lookon.repository.CompanyRepository;
import com.reltecsoft.lookon.service.CompanyService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CompanyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CompanyDataOnDemand: @Component;
    
    private Random CompanyDataOnDemand.rnd = new SecureRandom();
    
    private List<Company> CompanyDataOnDemand.data;
    
    @Autowired
    MediaDataOnDemand CompanyDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    CompanyStatusDataOnDemand CompanyDataOnDemand.companyStatusDataOnDemand;
    
    @Autowired
    CompanyService CompanyDataOnDemand.companyService;
    
    @Autowired
    CompanyRepository CompanyDataOnDemand.companyRepository;
    
    public Company CompanyDataOnDemand.getNewTransientCompany(int index) {
        Company obj = new Company();
        setAddress(obj, index);
        setCity(obj, index);
        setCompanyCode(obj, index);
        setCountry(obj, index);
        setCreateDate(obj, index);
        setEmail(obj, index);
        setIndustry(obj, index);
        setName(obj, index);
        setPhone(obj, index);
        return obj;
    }
    
    public void CompanyDataOnDemand.setAddress(Company obj, int index) {
        String address = "address_" + index;
        if (address.length() > 255) {
            address = address.substring(0, 255);
        }
        obj.setAddress(address);
    }
    
    public void CompanyDataOnDemand.setCity(Company obj, int index) {
        String city = "city_" + index;
        if (city.length() > 255) {
            city = city.substring(0, 255);
        }
        obj.setCity(city);
    }
    
    public void CompanyDataOnDemand.setCompanyCode(Company obj, int index) {
        String companyCode = "companyCode_" + index;
        if (companyCode.length() > 50) {
            companyCode = companyCode.substring(0, 50);
        }
        obj.setCompanyCode(companyCode);
    }
    
    public void CompanyDataOnDemand.setCountry(Company obj, int index) {
        String country = "country_" + index;
        if (country.length() > 50) {
            country = country.substring(0, 50);
        }
        obj.setCountry(country);
    }
    
    public void CompanyDataOnDemand.setCreateDate(Company obj, int index) {
        Date createDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateDate(createDate);
    }
    
    public void CompanyDataOnDemand.setEmail(Company obj, int index) {
        Email email = null;
        obj.setEmail(email);
    }
    
    public void CompanyDataOnDemand.setIndustry(Company obj, int index) {
        String industry = "industry_" + index;
        if (industry.length() > 255) {
            industry = industry.substring(0, 255);
        }
        obj.setIndustry(industry);
    }
    
    public void CompanyDataOnDemand.setName(Company obj, int index) {
        String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    public void CompanyDataOnDemand.setPhone(Company obj, int index) {
        Phone phone = null;
        obj.setPhone(phone);
    }
    
    public Company CompanyDataOnDemand.getSpecificCompany(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Company obj = data.get(index);
        Long id = obj.getId();
        return companyService.findCompany(id);
    }
    
    public Company CompanyDataOnDemand.getRandomCompany() {
        init();
        Company obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return companyService.findCompany(id);
    }
    
    public boolean CompanyDataOnDemand.modifyCompany(Company obj) {
        return false;
    }
    
    public void CompanyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = companyService.findCompanyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Company' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Company>();
        for (int i = 0; i < 10; i++) {
            Company obj = getNewTransientCompany(i);
            try {
                companyService.saveCompany(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            companyRepository.flush();
            data.add(obj);
        }
    }
    
}
