// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.MediaDataOnDemand;
import com.reltecsoft.lookon.domain.Note;
import com.reltecsoft.lookon.domain.NoteDataOnDemand;
import com.reltecsoft.lookon.domain.NotesTypeDataOnDemand;
import com.reltecsoft.lookon.domain.Person;
import com.reltecsoft.lookon.domain.PersonDataOnDemand;
import com.reltecsoft.lookon.repository.NoteRepository;
import com.reltecsoft.lookon.service.NoteService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NoteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NoteDataOnDemand: @Component;
    
    private Random NoteDataOnDemand.rnd = new SecureRandom();
    
    private List<Note> NoteDataOnDemand.data;
    
    @Autowired
    MediaDataOnDemand NoteDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    PersonDataOnDemand NoteDataOnDemand.personDataOnDemand;
    
    @Autowired
    NotesTypeDataOnDemand NoteDataOnDemand.notesTypeDataOnDemand;
    
    @Autowired
    NoteService NoteDataOnDemand.noteService;
    
    @Autowired
    NoteRepository NoteDataOnDemand.noteRepository;
    
    public Note NoteDataOnDemand.getNewTransientNote(int index) {
        Note obj = new Note();
        setNoteText(obj, index);
        setPerson(obj, index);
        setReadOnly(obj, index);
        return obj;
    }
    
    public void NoteDataOnDemand.setNoteText(Note obj, int index) {
        String noteText = "noteText_" + index;
        if (noteText.length() > 2048) {
            noteText = noteText.substring(0, 2048);
        }
        obj.setNoteText(noteText);
    }
    
    public void NoteDataOnDemand.setPerson(Note obj, int index) {
        Person person = personDataOnDemand.getRandomPerson();
        obj.setPerson(person);
    }
    
    public void NoteDataOnDemand.setReadOnly(Note obj, int index) {
        Boolean readOnly = Boolean.TRUE;
        obj.setReadOnly(readOnly);
    }
    
    public Note NoteDataOnDemand.getSpecificNote(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Note obj = data.get(index);
        Long id = obj.getId();
        return noteService.findNote(id);
    }
    
    public Note NoteDataOnDemand.getRandomNote() {
        init();
        Note obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return noteService.findNote(id);
    }
    
    public boolean NoteDataOnDemand.modifyNote(Note obj) {
        return false;
    }
    
    public void NoteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = noteService.findNoteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Note' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Note>();
        for (int i = 0; i < 10; i++) {
            Note obj = getNewTransientNote(i);
            try {
                noteService.saveNote(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            noteRepository.flush();
            data.add(obj);
        }
    }
    
}
