// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.Chat;
import com.reltecsoft.lookon.domain.ChatDataOnDemand;
import com.reltecsoft.lookon.domain.ChatMessage;
import com.reltecsoft.lookon.domain.ChatMessageDataOnDemand;
import com.reltecsoft.lookon.domain.MediaDataOnDemand;
import com.reltecsoft.lookon.domain.Person;
import com.reltecsoft.lookon.domain.PersonDataOnDemand;
import com.reltecsoft.lookon.repository.ChatMessageRepository;
import com.reltecsoft.lookon.service.ChatMessageService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ChatMessageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ChatMessageDataOnDemand: @Component;
    
    private Random ChatMessageDataOnDemand.rnd = new SecureRandom();
    
    private List<ChatMessage> ChatMessageDataOnDemand.data;
    
    @Autowired
    ChatDataOnDemand ChatMessageDataOnDemand.chatDataOnDemand;
    
    @Autowired
    MediaDataOnDemand ChatMessageDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    PersonDataOnDemand ChatMessageDataOnDemand.personDataOnDemand;
    
    @Autowired
    ChatMessageService ChatMessageDataOnDemand.chatMessageService;
    
    @Autowired
    ChatMessageRepository ChatMessageDataOnDemand.chatMessageRepository;
    
    public ChatMessage ChatMessageDataOnDemand.getNewTransientChatMessage(int index) {
        ChatMessage obj = new ChatMessage();
        setChatId(obj, index);
        setDateMessage(obj, index);
        setMessageText(obj, index);
        setPersonId(obj, index);
        return obj;
    }
    
    public void ChatMessageDataOnDemand.setChatId(ChatMessage obj, int index) {
        Chat chatId = chatDataOnDemand.getRandomChat();
        obj.setChatId(chatId);
    }
    
    public void ChatMessageDataOnDemand.setDateMessage(ChatMessage obj, int index) {
        Calendar dateMessage = Calendar.getInstance();
        obj.setDateMessage(dateMessage);
    }
    
    public void ChatMessageDataOnDemand.setMessageText(ChatMessage obj, int index) {
        String messageText = "messageText_" + index;
        if (messageText.length() > 2048) {
            messageText = messageText.substring(0, 2048);
        }
        obj.setMessageText(messageText);
    }
    
    public void ChatMessageDataOnDemand.setPersonId(ChatMessage obj, int index) {
        Person personId = personDataOnDemand.getRandomPerson();
        obj.setPersonId(personId);
    }
    
    public ChatMessage ChatMessageDataOnDemand.getSpecificChatMessage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ChatMessage obj = data.get(index);
        BigDecimal id = obj.getId();
        return chatMessageService.findChatMessage(id);
    }
    
    public ChatMessage ChatMessageDataOnDemand.getRandomChatMessage() {
        init();
        ChatMessage obj = data.get(rnd.nextInt(data.size()));
        BigDecimal id = obj.getId();
        return chatMessageService.findChatMessage(id);
    }
    
    public boolean ChatMessageDataOnDemand.modifyChatMessage(ChatMessage obj) {
        return false;
    }
    
    public void ChatMessageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = chatMessageService.findChatMessageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ChatMessage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ChatMessage>();
        for (int i = 0; i < 10; i++) {
            ChatMessage obj = getNewTransientChatMessage(i);
            try {
                chatMessageService.saveChatMessage(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            chatMessageRepository.flush();
            data.add(obj);
        }
    }
    
}
