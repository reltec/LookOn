// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reltecsoft.lookon.domain;

import com.reltecsoft.lookon.domain.Community;
import com.reltecsoft.lookon.domain.CommunityDataOnDemand;
import com.reltecsoft.lookon.domain.Media;
import com.reltecsoft.lookon.domain.MediaDataOnDemand;
import com.reltecsoft.lookon.domain.Person;
import com.reltecsoft.lookon.domain.PersonDataOnDemand;
import com.reltecsoft.lookon.repository.CommunityRepository;
import com.reltecsoft.lookon.service.CommunityService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CommunityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CommunityDataOnDemand: @Component;
    
    private Random CommunityDataOnDemand.rnd = new SecureRandom();
    
    private List<Community> CommunityDataOnDemand.data;
    
    @Autowired
    MediaDataOnDemand CommunityDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    PersonDataOnDemand CommunityDataOnDemand.personDataOnDemand;
    
    @Autowired
    CommunityService CommunityDataOnDemand.communityService;
    
    @Autowired
    CommunityRepository CommunityDataOnDemand.communityRepository;
    
    public Community CommunityDataOnDemand.getNewTransientCommunity(int index) {
        Community obj = new Community();
        setCreateTime(obj, index);
        setDescription(obj, index);
        setMedia(obj, index);
        setName(obj, index);
        setPerson(obj, index);
        return obj;
    }
    
    public void CommunityDataOnDemand.setCreateTime(Community obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void CommunityDataOnDemand.setDescription(Community obj, int index) {
        String description = "description_" + index;
        if (description.length() > 2048) {
            description = description.substring(0, 2048);
        }
        obj.setDescription(description);
    }
    
    public void CommunityDataOnDemand.setMedia(Community obj, int index) {
        Media media = mediaDataOnDemand.getRandomMedia();
        obj.setMedia(media);
    }
    
    public void CommunityDataOnDemand.setName(Community obj, int index) {
        String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    public void CommunityDataOnDemand.setPerson(Community obj, int index) {
        Person person = personDataOnDemand.getRandomPerson();
        obj.setPerson(person);
    }
    
    public Community CommunityDataOnDemand.getSpecificCommunity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Community obj = data.get(index);
        Long id = obj.getId();
        return communityService.findCommunity(id);
    }
    
    public Community CommunityDataOnDemand.getRandomCommunity() {
        init();
        Community obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return communityService.findCommunity(id);
    }
    
    public boolean CommunityDataOnDemand.modifyCommunity(Community obj) {
        return false;
    }
    
    public void CommunityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = communityService.findCommunityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Community' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Community>();
        for (int i = 0; i < 10; i++) {
            Community obj = getNewTransientCommunity(i);
            try {
                communityService.saveCommunity(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            communityRepository.flush();
            data.add(obj);
        }
    }
    
}
